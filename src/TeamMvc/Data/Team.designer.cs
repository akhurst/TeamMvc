#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeamMvc.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Team")]
	public partial class TeamDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayerDM(PlayerDM instance);
    partial void UpdatePlayerDM(PlayerDM instance);
    partial void DeletePlayerDM(PlayerDM instance);
    partial void InsertTeamDM(TeamDM instance);
    partial void UpdateTeamDM(TeamDM instance);
    partial void DeleteTeamDM(TeamDM instance);
    partial void InsertGameDM(GameDM instance);
    partial void UpdateGameDM(GameDM instance);
    partial void DeleteGameDM(GameDM instance);
    #endregion
		
		public TeamDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TeamConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TeamDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeamDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeamDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TeamDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PlayerDM> PlayerDMs
		{
			get
			{
				return this.GetTable<PlayerDM>();
			}
		}
		
		public System.Data.Linq.Table<TeamDM> TeamDMs
		{
			get
			{
				return this.GetTable<TeamDM>();
			}
		}
		
		public System.Data.Linq.Table<GameDM> GameDMs
		{
			get
			{
				return this.GetTable<GameDM>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class PlayerDM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Position;
		
		private System.Nullable<int> _TeamId;
		
		private EntityRef<TeamDM> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnTeamIdChanging(System.Nullable<int> value);
    partial void OnTeamIdChanged();
    #endregion
		
		public PlayerDM()
		{
			this._Team = default(EntityRef<TeamDM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int")]
		public System.Nullable<int> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamDM Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				TeamDM previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class TeamDM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Hometown;
		
		private EntitySet<PlayerDM> _Players;
		
		private EntitySet<GameDM> _AwayGames;
		
		private EntitySet<GameDM> _HomeGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHometownChanging(string value);
    partial void OnHometownChanged();
    #endregion
		
		public TeamDM()
		{
			this._Players = new EntitySet<PlayerDM>(new Action<PlayerDM>(this.attach_Players), new Action<PlayerDM>(this.detach_Players));
			this._AwayGames = new EntitySet<GameDM>(new Action<GameDM>(this.attach_AwayGames), new Action<GameDM>(this.detach_AwayGames));
			this._HomeGames = new EntitySet<GameDM>(new Action<GameDM>(this.attach_HomeGames), new Action<GameDM>(this.detach_HomeGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hometown", DbType="NVarChar(50)")]
		public string Hometown
		{
			get
			{
				return this._Hometown;
			}
			set
			{
				if ((this._Hometown != value))
				{
					this.OnHometownChanging(value);
					this.SendPropertyChanging();
					this._Hometown = value;
					this.SendPropertyChanged("Hometown");
					this.OnHometownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<PlayerDM> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game", Storage="_AwayGames", ThisKey="Id", OtherKey="AwayTeamId")]
		public EntitySet<GameDM> AwayGames
		{
			get
			{
				return this._AwayGames;
			}
			set
			{
				this._AwayGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game1", Storage="_HomeGames", ThisKey="Id", OtherKey="HomeTeamId")]
		public EntitySet<GameDM> HomeGames
		{
			get
			{
				return this._HomeGames;
			}
			set
			{
				this._HomeGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(PlayerDM entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(PlayerDM entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_AwayGames(GameDM entity)
		{
			this.SendPropertyChanging();
			entity.AwayTeam = this;
		}
		
		private void detach_AwayGames(GameDM entity)
		{
			this.SendPropertyChanging();
			entity.AwayTeam = null;
		}
		
		private void attach_HomeGames(GameDM entity)
		{
			this.SendPropertyChanging();
			entity.HomeTeam = this;
		}
		
		private void detach_HomeGames(GameDM entity)
		{
			this.SendPropertyChanging();
			entity.HomeTeam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class GameDM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _HomeTeamId;
		
		private System.Nullable<int> _AwayTeamId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<TeamDM> _AwayTeam;
		
		private EntityRef<TeamDM> _HomeTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHomeTeamIdChanging(System.Nullable<int> value);
    partial void OnHomeTeamIdChanged();
    partial void OnAwayTeamIdChanging(System.Nullable<int> value);
    partial void OnAwayTeamIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public GameDM()
		{
			this._AwayTeam = default(EntityRef<TeamDM>);
			this._HomeTeam = default(EntityRef<TeamDM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamId", DbType="Int")]
		public System.Nullable<int> HomeTeamId
		{
			get
			{
				return this._HomeTeamId;
			}
			set
			{
				if ((this._HomeTeamId != value))
				{
					if (this._HomeTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamIdChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamId = value;
					this.SendPropertyChanged("HomeTeamId");
					this.OnHomeTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamId", DbType="Int")]
		public System.Nullable<int> AwayTeamId
		{
			get
			{
				return this._AwayTeamId;
			}
			set
			{
				if ((this._AwayTeamId != value))
				{
					if (this._AwayTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamIdChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamId = value;
					this.SendPropertyChanged("AwayTeamId");
					this.OnAwayTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game", Storage="_AwayTeam", ThisKey="AwayTeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamDM AwayTeam
		{
			get
			{
				return this._AwayTeam.Entity;
			}
			set
			{
				TeamDM previousValue = this._AwayTeam.Entity;
				if (((previousValue != value) 
							|| (this._AwayTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AwayTeam.Entity = null;
						previousValue.AwayGames.Remove(this);
					}
					this._AwayTeam.Entity = value;
					if ((value != null))
					{
						value.AwayGames.Add(this);
						this._AwayTeamId = value.Id;
					}
					else
					{
						this._AwayTeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AwayTeam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Game1", Storage="_HomeTeam", ThisKey="HomeTeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamDM HomeTeam
		{
			get
			{
				return this._HomeTeam.Entity;
			}
			set
			{
				TeamDM previousValue = this._HomeTeam.Entity;
				if (((previousValue != value) 
							|| (this._HomeTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HomeTeam.Entity = null;
						previousValue.HomeGames.Remove(this);
					}
					this._HomeTeam.Entity = value;
					if ((value != null))
					{
						value.HomeGames.Add(this);
						this._HomeTeamId = value.Id;
					}
					else
					{
						this._HomeTeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("HomeTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
